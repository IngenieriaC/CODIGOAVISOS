# -*- coding: utf-8 -*-
"""code_avisos3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Muqw1oykoxweSm1oapspkUwdGxE60Pw
"""

# -*- coding: utf-8 -*-
"""avisos_integrado"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
import io
import numpy as np

# Set a nice style for plots
sns.set_style('whitegrid')

# --- Configuración de la página (temática Sura) ---
st.set_page_config(
    page_title="Gerencia de Gestión Administrativa - Sura",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Estilos CSS para ambientar en amarillo, blanco y azul rey
st.markdown(
    """
    <style>
    /* Estilos generales del fondo con degradado */
    .stApp {
        background: linear-gradient(to right, #FFFFFF, #FFFACD, #4169E1); /* Blanco, Amarillo claro (Cream), Azul Rey */
        color: #333333; /* Color de texto general */
    }
    /* Sidebar */
    .st-emotion-cache-1oe6z58 { /* Esta clase puede cambiar en futuras versiones de Streamlit */
        background-color: #F0F8FF; /* Azul claro para la sidebar */
    }
    /* Títulos */
    h1, h2, h3, h4, h5, h6 {
        color: #4169E1; /* Azul Rey para los títulos */
    }
    /* Botones */
    .stButton>button {
        background-color: #4169E1; /* Azul Rey para los botones */
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        transition: background-color 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #F8D568; /* Amarillo para hover */
        color: #4169E1;
        border: 1px solid #4169E1;
    }
    /* Contenedores de contenido principal */
    .st-emotion-cache-z5fcl4, .st-emotion-cache-1c7y2kl, .st-emotion-cache-nahz7x { /* Clases genéricas para contenedores */
        background-color: rgba(255, 255, 255, 0.9); /* Blanco semitransparente */
        padding: 1.5rem;
        border-radius: 0.75rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }
    /* Mejoras para la tabla (dataframe) */
    .streamlit-dataframe {
        border-radius: 0.5rem;
        overflow: hidden; /* Asegura que las esquinas redondeadas se apliquen bien */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Función de carga & unión (optimizada para Streamlit) ---
@st.cache_data
def load_and_merge_data(uploaded_file_buffer: io.BytesIO) -> pd.DataFrame:
    """
    Carga y fusiona los datos de las diferentes hojas de un archivo Excel.

    Args:
        uploaded_file_buffer (io.BytesIO): Buffer del archivo Excel subido por el usuario.

    Returns:
        pd.DataFrame: El DataFrame combinado y limpio.
    """
    # Cargar hojas directamente desde el buffer
    iw29 = pd.read_excel(uploaded_file_buffer, sheet_name=0)
    uploaded_file_buffer.seek(0) # Rebobinar el buffer para leer la siguiente hoja
    iw39 = pd.read_excel(uploaded_file_buffer, sheet_name=1)
    uploaded_file_buffer.seek(0)
    ih08 = pd.read_excel(uploaded_file_buffer, sheet_name=2)
    uploaded_file_buffer.seek(0)
    iw65 = pd.read_excel(uploaded_file_buffer, sheet_name=3)
    uploaded_file_buffer.seek(0)
    zpm015 = pd.read_excel(uploaded_file_buffer, sheet_name=4)

    # Limpiar encabezados
    for df_temp in (iw29, iw39, ih08, iw65, zpm015):
        df_temp.columns = df_temp.columns.str.strip()

    # Guardar "Equipo" original desde IW29 para evitar pérdida
    equipo_original = iw29[["Aviso", "Equipo", "Duración de parada", "Descripción"]].copy()

    # Extraer solo columnas necesarias de iw39 para el merge (incluyendo 'Total general (real)')
    iw39_subset = iw39[["Aviso", "Total general (real)"]]

    # Unir por 'Aviso'
    tmp1 = pd.merge(iw29, iw39_subset, on="Aviso", how="left")
    tmp2 = pd.merge(tmp1, iw65, on="Aviso", how="left")

    # Restaurar el valor original de "Equipo" de IW29 después del merge
    tmp2.drop(columns=["Equipo"], errors='ignore', inplace=True)
    tmp2 = pd.merge(tmp2, equipo_original, on="Aviso", how="left")

    # Unir por 'Equipo' con IH08
    tmp3 = pd.merge(tmp2, ih08[[
        "Equipo", "Inic.garantía prov.", "Fin garantía prov.", "Texto", "Indicador ABC", "Denominación de objeto técnico"
    ]], on="Equipo", how="left")

    # Unir por 'Equipo' con ZPM015
    tmp4 = pd.merge(tmp3, zpm015[["Equipo", "TIPO DE SERVICIO"]], on="Equipo", how="left")

    # Renombrar columnas
    tmp4.rename(columns={
        "Texto": "Texto_equipo",
        "Total general (real)": "Costes tot.reales"
    }, inplace=True)

    columnas_finales = [
        "Aviso", "Orden", "Fecha de aviso", "Código postal", "Status del sistema",
        "Descripción", "Ubicación técnica", "Indicador", "Equipo",
        "Denominación de objeto técnico", "Denominación ejecutante",
        "Duración de parada", "Centro de coste", "Costes tot.reales",
        "Inic.garantía prov.", "Fin garantía prov.", "Texto_equipo",
        "Indicador ABC", "Texto código acción", "Texto de acción",
        "Texto grupo acción", "TIPO DE SERVICIO"
    ]

    # Filtrar solo las columnas que realmente existen en tmp4
    columnas_finales = [col for col in columnas_finales if col in tmp4.columns]

    df = tmp4[columnas_finales]

    # Normalize column names more robustly from code_avisos (1).py
    ORIGINAL_EJECUTANTE_COL_NAME = "Denominación ejecutante"
    ORIGINAL_CP_COL_NAME = "Código postal"
    ORIGINAL_OBJETO_TECNICO_COL_NAME = "Denominación de objeto técnico"
    ORIGINAL_TEXTO_CODIGO_ACCION_COL_NAME = "Texto código acción"
    ORIGINAL_TEXTO_ACCION_COL_NAME = "Texto de acción"
    ORIGINAL_TIPO_SERVICIO_COL_NAME = "TIPO DE SERVICIO" # Changed to match actual column in ZPM015 sheet
    ORIGINAL_COSTOS_COL_NAME = "Costes tot.reales"
    ORIGINAL_DESCRIPTION_COL_NAME = "Descripción"
    ORIGINAL_FECHA_AVISO_COL_NAME = "Fecha de aviso"
    ORIGINAL_TEXTO_POSICION_COL_NAME = "Texto de Posición" # This is the missing column
    ORIGINAL_TEXTO_EQUIPO_COL_NAME = "Texto_equipo"
    ORIGINAL_DURACION_PARADA_COL_NAME = "Duración de parada"
    ORIGINAL_EQUIPO_COL_COL_NAME = "Equipo"
    ORIGINAL_AVISO_COL_NAME = "Aviso"
    ORIGINAL_STATUS_SISTEMA_COL_NAME = "Status del sistema" # Added for PTBO filtering

    column_mapping = {
        ORIGINAL_EJECUTANTE_COL_NAME: "denominacion_ejecutante",
        ORIGINAL_CP_COL_NAME: "codigo_postal",
        ORIGINAL_OBJETO_TECNICO_COL_NAME: "denominacion_de_objeto_tecnico",
        ORIGINAL_TEXTO_CODIGO_ACCION_COL_NAME: "texto_codigo_accion",
        ORIGINAL_TEXTO_ACCION_COL_NAME: "texto_de_accion",
        ORIGINAL_TIPO_SERVICIO_COL_NAME: "tipo_de_servicio",
        ORIGINAL_COSTOS_COL_NAME: "costes_totreales",
        ORIGINAL_DESCRIPTION_COL_NAME: "descripcion",
        ORIGINAL_FECHA_AVISO_COL_NAME: "fecha_de_aviso",
        ORIGINAL_TEXTO_POSICION_COL_NAME: "texto_de_posicion",
        ORIGINAL_TEXTO_EQUIPO_COL_NAME: "texto_equipo",
        ORIGINAL_DURACION_PARADA_COL_NAME: "duracion_de_parada",
        ORIGINAL_EQUIPO_COL_COL_NAME: "equipo",
        ORIGINAL_AVISO_COL_NAME: "aviso",
        ORIGINAL_STATUS_SISTEMA_COL_NAME: "status_del_sistema" # Mapped to normalized name
    }

    normalized_df_columns = []
    for col in df.columns:
        found_match = False
        for original, normalized in column_mapping.items():
            if col.strip().lower() == original.strip().lower():
                normalized_df_columns.append(normalized)
                found_match = True
                break
        if not found_match:
            # Fallback for columns not in mapping: normalize to lowercase, replace spaces with underscores, remove periods, handle accents
            normalized_df_columns.append(
                col.lower()
                .strip()
                .replace(" ", "_")
                .replace(".", "")
                .replace("á", "a").replace("é", "e").replace("í", "i").replace("ó", "o").replace("ú", "u")
            )
    df.columns = normalized_df_columns

    # Assign relevant columns to new, simplified names for easier access (from first code)
    df['PROVEEDOR'] = df['denominacion_ejecutante']
    df['COSTO'] = df['costes_totreales']
    df['TIEMPO PARADA'] = pd.to_numeric(df['duracion_de_parada'], errors='coerce')
    df['EQUIPO'] = pd.to_numeric(df['equipo'], errors='coerce')
    df['AVISO'] = pd.to_numeric(df['aviso'], errors='coerce')
    df['TIPO DE SERVICIO'] = df['tipo_de_servicio']

    # Ensure 'costes_totreales' is numeric
    df['costes_totreales'] = pd.to_numeric(df['costes_totreales'], errors='coerce')

    # --- HORARIO Mapping (from first code) ---
    horarios_dict = {
        "HORARIO_99": (17, 364.91), "HORARIO_98": (14.5, 312.78), "HORARIO_97": (9.818181818, 286.715),
        "HORARIO_96": (14.5, 312.78), "HORARIO_95": (4, 208.52), "HORARIO_93": (13.45454545, 286.715),
        "HORARIO_92": (6, 338.845), "HORARIO_91": (9.25, 312.78), "HORARIO_90": (11, 260.65),
        "HORARIO_9": (16, 312.78), "HORARIO_89": (9.5, 260.65), "HORARIO_88": (14, 260.65),
        "HORARIO_87": (9.333333333, 312.78), "HORARIO_86": (9.666666667, 312.78), "HORARIO_85": (12, 312.78),
        "HORARIO_84": (9.5, 312.78), "HORARIO_83": (8.416666667, 312.78), "HORARIO_82": (6, 312.78),
        "HORARIO_81": (10, 312.78), "HORARIO_80": (8.5, 312.78), "HORARIO_8": (11.6, 260.65),
        "HORARIO_79": (14, 312.78), "HORARIO_78": (12, 312.78), "HORARIO_77": (3, 312.78),
        "HORARIO_76": (16, 312.78), "HORARIO_75": (12.16666667, 312.78), "HORARIO_74": (11.33333333, 312.78),
        "HORARIO_73": (12.66666667, 312.78), "HORARIO_72": (11.83333333, 312.78), "HORARIO_71": (11, 312.78),
        "HORARIO_70": (15.16666667, 312.78), "HORARIO_7": (15.33333333, 312.78), "HORARIO_69": (9.166666667, 312.78),
        "HORARIO_68": (4, 312.78), "HORARIO_67": (10, 260.65), "HORARIO_66": (4, 260.65),
        "HORARIO_65": (16.76923077, 338.845), "HORARIO_64": (17.15384615, 338.845), "HORARIO_63": (22.5, 312.78),
        "HORARIO_62": (12.25, 312.78), "HORARIO_61": (4, 312.78), "HORARIO_60": (13, 312.78),
        "HORARIO_6": (18.46153846, 338.845), "HORARIO_59": (12.66666667, 312.78), "HORARIO_58": (12.33333333, 312.78),
        "HORARIO_57": (13.53846154, 338.845), "HORARIO_56": (12.16666667, 312.78), "HORARIO_55": (6.333333333, 312.78),
        "HORARIO_54": (7.230769231, 338.845), "HORARIO_53": (5.5, 312.78), "HORARIO_52": (4, 312.78),
        "HORARIO_51": (14, 338.845), "HORARIO_50": (15, 312.78), "HORARIO_5": (17, 312.78),
        "HORARIO_49": (15.27272727, 286.715), "HORARIO_48": (14.76923077, 338.845), "HORARIO_47": (14.5, 312.78),
        "HORARIO_46": (14.33333333, 312.78), "HORARIO_45": (14.16666667, 312.78), "HORARIO_44": (13.83333333, 312.78),
        "HORARIO_43": (13.5, 312.78), "HORARIO_42": (13.91666667, 312.78), "HORARIO_41": (15, 364.91),
        "HORARIO_40": (15.81818182, 286.715), "HORARIO_4": (16.16666667, 312.78), "HORARIO_39": (15.27272727, 286.715),
        "HORARIO_38": (13.84615385, 338.845), "HORARIO_37": (15.09090909, 286.715), "HORARIO_36": (14, 364.91),
        "HORARIO_35": (14.30769231, 338.845), "HORARIO_34": (14.90909091, 286.715), "HORARIO_33": (13.55, 312.78),
        "HORARIO_32": (14, 338.845), "HORARIO_31": (14.72727273, 286.715), "HORARIO_30": (13.08333333, 312.78),
        "HORARIO_3": (16, 312.78), "HORARIO_29": (14, 286.715), "HORARIO_28": (13, 364.91),
        "HORARIO_27": (14, 286.715), "HORARIO_26": (12.58333333, 312.78), "HORARIO_25": (12, 312.78),
        "HORARIO_24": (13.27272727, 286.715), "HORARIO_23": (11.83333333, 312.78), "HORARIO_22": (11.91666667, 312.78),
        "HORARIO_21": (13.09090909, 286.715), "HORARIO_20": (5, 312.78), "HORARIO_2": (23.5, 364.91),
        "HORARIO_19": (12.18181818, 286.715), "HORARIO_18": (5, 312.78), "HORARIO_17": (9.75, 312.78),
        "HORARIO_16": (10.36363636, 286.715), "HORARIO_15": (10.18181818, 286.715), "HORARIO_14": (8.5, 312.78),
        "HORARIO_134": (12, 364.91), "HORARIO_133": (12, 260.65), "HORARIO_132": (13, 312.78),
        "HORARIO_131": (10, 312.78), "HORARIO_130": (11, 260.65), "HORARIO_13": (9.454545455, 286.715),
        "HORARIO_129": (9.384615385, 338.845), "HORARIO_128": (12.33333333, 312.78), "HORARIO_127": (9.666666667, 312.78),
        "HORARIO_126": (10.83333333, 312.78), "HORARIO_125": (4, 312.78), "HORARIO_124": (13.66666667, 312.78),
        "HORARIO_123": (16.61538462, 338.845), "HORARIO_122": (11, 260.65), "HORARIO_121": (11.66666667, 312.78),
        "HORARIO_120": (8.25, 312.78), "HORARIO_12": (9.272727273, 286.715), "HORARIO_119": (11.23076923, 338.845),
        "HORARIO_118": (11.27272727, 286.715), "HORARIO_117": (11.41666667, 312.78), "HORARIO_116": (11, 312.78),
        "HORARIO_115": (9.25, 312.78), "HORARIO_114": (23.07692308, 338.845), "HORARIO_113": (20, 338.845),
        "HORARIO_112": (10.61538462, 338.845), "HORARIO_111": (9.454545455, 286.715), "HORARIO_110": (6.833333333, 312.78),
        "HORARIO_11": (8, 312.78), "HORARIO_109": (12.90909091, 286.715), "HORARIO_108": (10.54545455, 286.715),
        "HORARIO_107": (12.61538462, 338.845), "HORARIO_106": (14.76923077, 338.845), "HORARIO_105": (12, 156.39),
        "HORARIO_104": (7.666666667, 312.78), "HORARIO_103": (3, 260.65), "HORARIO_102": (10.16666667, 312.78),
        "HORARIO_101": (12, 260.65), "HORARIO_100": (11.16666667, 312.78), "HORARIO_10": (6, 312.78),
        "HORARIO_1": (24, 364.91),
    }
    df['HORARIO'] = df['texto_equipo'].str.strip().str.upper()
    df['HORA/ DIA'] = df['HORARIO'].map(lambda x: horarios_dict.get(x, (None, None))[0])
    df['DIAS/ AÑO'] = df['HORARIO'].map(lambda x: horarios_dict.get(x, (None, None))[1])
    df['DIAS/ AÑO'] = pd.to_numeric(df['DIAS/ AÑO'], errors='coerce')
    df['HORA/ DIA'] = pd.to_numeric(df['HORA/ DIA'], errors='coerce')

    # --- Initial Filtering from first code ---
    # Ensure 'EQUIPO' is not NaN for core calculations
    df = df.dropna(subset=['EQUIPO'])

    # --- Additional Preprocessing for Second Code's requirements ---
    df["fecha_de_aviso"] = pd.to_datetime(df["fecha_de_aviso"], errors="coerce")
    df["año"] = df["fecha_de_aviso"].dt.year
    df["mes"] = df["fecha_de_aviso"].dt.strftime("%B") # Month name, e.g., 'January'

    def extract_description_category(description):
        if pd.isna(description):
            return "Otros"
        match = re.match(r'^([A-Z]{2})/', str(description).strip())
        if match:
            return match.group(1)
        return "Otros"

    df["description_category"] = df['descripcion'].apply(extract_description_category)
    return df

# --- DEFINICIÓN DE PREGUNTAS PARA EVALUACIÓN ---
preguntas = [
    ("Calidad", "¿Las soluciones propuestas son coherentes con el diagnóstico y causa raíz del problema?", "2,1,0,-1"),
    ("Calidad", "¿El trabajo entregado tiene materiales nuevos, originales y de marcas reconocidas?", "2,1,0,-1"),
    ("Calidad", "¿Cuenta con acabados homogéneos, limpios y pulidos?", "2,1,0,-1"),
    ("Calidad", "¿El trabajo entregado corresponde completamente con lo contratado?", "2,1,0,-1"),
    ("Calidad", "¿La facturación refleja correctamente lo ejecutado y acordado?", "2,1,0,-1"),
    ("Oportunidad", "¿La entrega de cotizaciones fue oportuna, según el contrato?", "2,1,0,-1"),
    ("Oportunidad", "¿El reporte del servicio fue entregado oportunamente, según el contrato?", "2,1,0,-1"),
    ("Oportunidad", "¿Cumple las fechas y horas programadas para los trabajos, según el contrato?", "2,1,0,-1"),
    ("Oportunidad", "¿Responde de forma efectiva ante eventualidades emergentes, según el contrato?", "2,1,0,-1"),
    ("Oportunidad", "¿Soluciona rápidamente reclamos o inquietudes por garantía, según el contrato?", "2,1,0,-1"),
    ("Oportunidad", "¿Dispone de los repuestos requeridos en los tiempos necesarios, según el contrato?", "2,1,0,-1"),
    ("Oportunidad", "¿Entrega las facturas en los tiempos convenidos, según el contrato?", "2,1,0,-1"),
    ("Precio", "¿Los precios ofrecidos para equipos son competitivos respecto al mercado?", "2,1,0,-1"),
    ("Precio", "¿Los precios ofrecidos para repuestos son competitivos respecto al mercado?", "2,1,0,-1"),
    ("Precio", "¿Los precios ofrecidos para mantenimientos son competitivos respecto al mercado?", "2,1,0,-1"),
    ("Precio", "¿Los precios ofrecidos para insumos son competitivos respecto al mercado?", "2,1,0,-1"),
    ("Postventa", "¿Tiene disposición y actitud de servicio frente a solicitudes?", "2,1,0,-1"),
    ("Postventa", "¿Conoce necesidades y ofrece alternativas adecuadas?", "2,1,0,-1"),
    ("Postventa", "¿Realiza seguimiento a los resultados de los trabajos?", "2,1,0,-1"),
    ("Postventa", "¿Ofrece capacitaciones para el manejo de los equipos?", "2,1,0,-1"),
    ("Postventa", "¿Los métodos de capacitación ofrecidos son efectivos y adecuados?", "2,1,0,-1"),
    ("Desempeño técnico", "Disponibilidad promedio (%)", "auto"),
    ("Desempeño técnico", "MTTR promedio (hrs)", "auto"),
    ("Desempeño técnico", "MTBF promedio (hrs)", "auto"),
    ("Desempeño técnico", "Rendimiento promedio equipos", "auto"),
]

# --- Definición de las preguntas y rangos DETALLADOS ---
rangos_detallados = {
    "Calidad": {
        "¿Las soluciones propuestas son coherentes con el diagnóstico y causa raíz del problema?": {
            2: "Total coherencia con el diagnóstico y causas identificadas",
            1: "Coherencia razonable, con pequeños ajustes necesarios",
            0: "Cumple con lo básico, pero con limitaciones relevantes",
            -1: "No guarda coherencia o es deficiente respecto al diagnóstico"
        },
        "¿El trabajo entregado tiene materiales nuevos, originales y de marcas reconocidas?": {
            2: "Todos los materiales son nuevos, originales y de marcas reconocidas",
            1: "La mayoría de los materiales cumplen esas condiciones",
            0: "Algunos materiales no son nuevos o no están certificados",
            -1: "Materiales genéricos, usados o sin respaldo de marca"
        },
        "¿Cuenta con acabados homogéneos, limpios y pulidos?": {
            2: "Acabados uniformes, bien presentados y profesionales",
            1: "En general, los acabados son aceptables y limpios",
            0: "Presenta inconsistencias notorias en algunos acabados",
            -1: "Acabados descuidados, sucios o sin terminación adecuada"
        },
        "¿El trabajo entregado corresponde completamente con lo contratado?": {
            2: "Cumple en su totalidad con lo contratado y acordado",
            1: "Cumple en gran parte con lo contratado, con mínimos desvíos",
            0: "Cumple con los requisitos mínimos establecidos",
            -1: "No corresponde con lo contratado o presenta deficiencias importantes"
        },
        "¿La facturación refleja correctamente lo ejecutado y acordado?": {
            2: "Facturación precisa, sin errores y con toda la información requerida",
            1: "Facturación con pequeños errores que no afectan el control",
            0: "Facturación con errores importantes (por ejemplo, precios)",
            -1: "Facturación incorrecta, incompleta o que requiere ser repetida"
        }
    },
    "Oportunidad": {
        "¿La entrega de cotizaciones fue oportuna, según el contrato?": {
            2: "Siempre entrega cotizaciones en los tiempos establecidos",
            1: "Generalmente cumple con los plazos establecidos",
            0: "A veces entrega fuera del tiempo estipulado",
            -1: "Frecuentemente incumple los tiempos o no entrega"
        },
        "¿El reporte del servicio fue entregado oportunamente, según el contrato?": {
            2: "Siempre entrega los reportes a tiempo, según lo acordado",
            1: "Entrega los reportes con mínimos retrasos",
            0: "Entrega con demoras ocasionales",
            -1: "Entrega tardía constante o no entrega"
        },
        "¿Cumple las fechas y horas programadas para los trabajos, según el contrato?": {
            2: "Puntualidad absoluta en fechas y horarios de ejecución",
            1: "Puntualidad general con excepciones menores",
            0: "Cumplimiento parcial o con retrasos frecuentes",
            -1: "Incumplimiento reiterado de horarios o fechas"
        },
        "¿Responde de forma efectiva ante eventualidades emergentes, según el contrato?": {
            2: "Respuesta inmediata y eficaz ante cualquier eventualidad",
            1: "Respuesta adecuada en la mayoría de los casos",
            0: "Respuesta tardía o poco efectiva en varias situaciones",
            -1: "No responde adecuadamente o ignora emergencias"
        },
        "¿Soluciona rápidamente reclamos o inquietudes por garantía, según el contrato?": {
            2: "Soluciona siempre con rapidez y eficacia",
            1: "Responde satisfactoriamente en la mayoría de los casos",
            0: "Respuesta variable, con demoras ocasionales",
            -1: "Soluciones lentas o sin resolver adecuadamente"
        },
        "¿Dispone de los repuestos requeridos en los tiempos necesarios, según el contrato?": {
            2: "Siempre cuenta con repuestos disponibles en el tiempo requerido",
            1: "Generalmente cumple con la disponibilidad de repuestos",
            0: "Disponibilidad intermitente o con retrasos",
            -1: "No garantiza disponibilidad o presenta retrasos constantes"
        },
        "¿Entrega las facturas en los tiempos convenidos, según el contrato?": {
            2: "Entrega siempre puntual de facturas",
            1: "Entrega generalmente puntual con pocas excepciones",
            0: "Entrega ocasionalmente fuera del tiempo acordado",
            -1: "Entrega tarde con frecuencia o no entrega"
        }
    },
    "Precio": {
        "¿Los precios ofrecidos para equipos son competitivos respecto al mercado?": {
            2: "Muy por debajo del precio promedio de mercado",
            1: "Por debajo del promedio de mercado",
            0: "Igual al promedio de mercado",
            -1: "Por encima del promedio de mercado"
        },
        "¿Los precios ofrecidos para repuestos son competitivos respecto al mercado?": {
            2: "Muy por debajo del precio promedio de mercado",
            1: "Por debajo del promedio de mercado",
            0: "Igual al promedio de mercado",
            -1: "Por encima del promedio de mercado"
        },
        "Facilita llegar a una negociación (precios)": {
            2: "Siempre está dispuesto a negociar de manera flexible",
            1: "En general muestra disposición al diálogo",
            0: "Ocasionalmente permite negociar",
            -1: "Poco o nada dispuesto a negociar"
        },
        "Pone en consideración contratos y trabajos adjudicados en el último periodo de tiempo": {
            2: "Siempre toma en cuenta la relación comercial previa",
            1: "Generalmente considera trabajos anteriores",
            0: "Solo ocasionalmente lo toma en cuenta",
            -1: "No muestra continuidad ni reconocimiento de antecedentes"
        },
        "¿Los precios ofrecidos para mantenimientos son competitivos respecto al mercado?": {
            2: "Muy por debajo del precio promedio de mercado",
            1: "Por debajo del promedio de mercado",
            0: "Igual al promedio de mercado",
            -1: "Por encima del promedio de mercado"
        },
        "¿Los precios ofrecidos para insumos son competitivos respecto al mercado?": {
            2: "Muy por debajo del precio promedio de mercado",
            1: "Por debajo del promedio de mercado",
            0: "Igual al promedio de mercado",
            -1: "Por encima del promedio de mercado"
        }
    },
    "Postventa": {
        "¿Tiene disposición y actitud de servicio frente a solicitudes?": {
            2: "Atención proactiva y excelente actitud de servicio",
            1: "Buena actitud y disposición general",
            0: "Actitud pasiva o limitada ante las solicitudes",
            -1: "Falta de disposición o actitudes negativas"
        },
        "¿Conoce necesidades y ofrece alternativas adecuadas?": {
            2: "Conocimiento profundo del cliente y propuestas adecuadas",
            1: "Buen conocimiento y alternativas en general adecuadas",
            0: "Soluciones parcialmente adecuadas",
            -1: "No se adapta a las necesidades o propone soluciones inadecuadas"
        },
        "¿Realiza seguimiento a los resultados de los trabajos?": {
            2: "Hace seguimiento sistemático y detallado",
            1: "Realiza seguimiento general adecuado",
            0: "Seguimiento ocasional o no documentado",
            -1: "No realiza seguimiento posterior"
        },
        "¿Ofrece capacitaciones para el manejo de los equipos?": {
            2: "Capacitaciones constantes y bien estructuradas",
            1: "Capacitaciones ocasionales pero útiles",
            0: "Capacitaciones mínimas o informales",
            -1: "No ofrece capacitaciones"
        },
        "¿Los métodos de capacitación ofrecidos son efectivos y adecuados?": {
            2: "Métodos claros, efectivos y adaptados al usuario",
            1: "Métodos generalmente útiles y comprensibles",
            0: "Métodos poco claros o limitados",
            -1: "Métodos ineficaces o mal estructurados"
        }
    },
    "Desempeño técnico": {
        "Disponibilidad promedio (%)": {
            2: "Disponibilidad >= 98%",
            1: "75% <= Disponibilidad < 98%",
            0: "Disponibilidad < 75%"
        },
        "MTTR promedio (hrs)": {
            2: "MTTR <= 5 hrs",
            1: "5 hrs < MTTR <= 20 hrs",
            0: "MTTR > 20 hrs"
        },
        "MTBF promedio (hrs)": {
            2: "MTBF > 1000 hrs",
            1: "100 hrs <= MTBF <= 1000 hrs",
            0: "MTBF < 100 hrs"
        },
        "Rendimiento promedio equipos": {
            2: "Rendimiento 'Alto' (Disponibilidad >= 90%)",
            1: "Rendimiento 'Medio' (75% <= Disponibilidad < 90%)",
            0: "Rendimiento 'Bajo' (Disponibilidad < 75%)"
        }
    }
}


# --- FUNCIONES DE CÁLCULO DE INDICADORES (Modificadas para calcular por Proveedor dentro de un Tipo de Servicio) ---
def calcular_indicadores_por_proveedor_y_servicio(df_sub_filtered):
    """
    Calcula indicadores de servicio (MTTR, MTBF, Disp, Rendimiento) por Proveedor para un Tipo de Servicio dado.
    Args:
        df_sub_filtered (pd.DataFrame): DataFrame filtrado para un Tipo de Servicio específico.
    Returns:
        tuple: Series de Pandas con los indicadores (count, cost, mttr, mtbf, disp, rend) agrupados por PROVEEDOR.
    """
    if df_sub_filtered.empty:
        # Return empty Series with appropriate dtypes for robustness
        return (pd.Series(dtype=int), pd.Series(dtype=float), pd.Series(dtype=float),
                pd.Series(dtype=float), pd.Series(dtype=float), pd.Series(dtype=object))

    # Ensure PROVEEDOR, TIEMPO PARADA, COSTO, AVISO, HORA/DIA, DIAS/AÑO are present
    required_cols = ['PROVEEDOR', 'TIEMPO PARADA', 'COSTO', 'AVISO', 'HORA/ DIA', 'DIAS/ AÑO']
    if not all(col in df_sub_filtered.columns for col in required_cols):
        st.error(f"Faltan columnas requeridas para calcular indicadores: {set(required_cols) - set(df_sub_filtered.columns)}")
        return (pd.Series(dtype=int), pd.Series(dtype=float), pd.Series(dtype=float),
                pd.Series(dtype=float), pd.Series(dtype=float), pd.Series(dtype=object))

    cnt = df_sub_filtered.groupby('PROVEEDOR')['AVISO'].count()
    cost = df_sub_filtered.groupby('PROVEEDOR')['COSTO'].sum()
    mttr = df_sub_filtered.groupby('PROVEEDOR')['TIEMPO PARADA'].mean()

    # Calculate ttot (total operating time for a service type for each provider)
    ttot = df_sub_filtered.groupby('PROVEEDOR').agg(
        total_horas_anio=('DIAS/ AÑO', 'mean'),
        horas_dia=('HORA/ DIA', 'mean')
    )
    ttot_calculated = (ttot['total_horas_anio'] * ttot['horas_dia']).replace([np.inf, -np.inf], np.nan)
    ttot_calculated = ttot_calculated.fillna(0) # Assume 0 if no valid time info

    down = df_sub_filtered.groupby('PROVEEDOR')['TIEMPO PARADA'].sum()
    fails = df_sub_filtered.groupby('PROVEEDOR')['AVISO'].count()

    # Handle division by zero for MTBF and Disponibilidad
    mtbf = (ttot_calculated - down) / fails.replace(0, np.nan)
    mtbf = mtbf.fillna(0) # Treat as 0 if no failures or ttot is 0

    disp = (mtbf / (mtbf + mttr)).replace([np.inf, -np.inf], np.nan) * 100
    disp = disp.fillna(0) # Treat as 0 if cannot be calculated

    rend = disp.apply(lambda v: 'Alto' if v >= 90 else ('Medio' if v >= 75 else 'Bajo') if not pd.isna(v) else 'No Aplica')
    return cnt, cost, mttr, mtbf, disp, rend

# --- EVALUATION APP FOR STREAMLIT ---
class EvaluacionProveedoresApp:
    def __init__(self, df):
        self.df = df
        # Initialize session state for this class if not already done
        if 'all_evaluation_widgets_map' not in st.session_state:
            st.session_state['all_evaluation_widgets_map'] = {}
        if 'evaluation_page_providers' not in st.session_state: # Page for providers
            st.session_state['evaluation_page_providers'] = 0
        if 'current_service_type_metrics' not in st.session_state:
            st.session_state['current_service_type_metrics'] = {} # Metrics now store per-provider for selected service type
        if 'all_service_providers' not in st.session_state:
            st.session_state['all_service_providers'] = []
        if 'selected_service_type' not in st.session_state:
             st.session_state['selected_service_type'] = "Seleccionar..." # Initial dummy value


    def display_evaluation_form(self, df_filtered_by_service, selected_service_type):
        st.subheader(f"Evaluación de Proveedores para Tipo de Servicio: {selected_service_type}")

        # Get unique providers for the selected service type
        all_service_providers = sorted(df_filtered_by_service['PROVEEDOR'].dropna().unique().tolist())
        st.session_state['all_service_providers'] = all_service_providers

        if not all_service_providers:
            st.info(f"No se encontraron proveedores para el tipo de servicio '{selected_service_type}'.")
            st.session_state['all_evaluation_widgets_map'] = {}
            return

        # Recalculate metrics for all providers under this service type
        # These will be accessed by provider name
        cnt_p, cost_p, mttr_p, mtbf_p, disp_p, rend_p = calcular_indicadores_por_proveedor_y_servicio(df_filtered_by_service)
        st.session_state['current_service_type_metrics'] = {
            'cnt': cnt_p, 'cost': cost_p, 'mttr': mttr_p,
            'mtbf': mtbf_p, 'disp': disp_p, 'rend': rend_p
        }

        items_per_page = 5 # Number of providers to show per page
        total_providers = len(all_service_providers)
        max_page = max(0, (total_providers - 1) // items_per_page)

        # Ensure current page is valid after filters or service type change
        if st.session_state['evaluation_page_providers'] > max_page:
            st.session_state['evaluation_page_providers'] = max_page
        if st.session_state['evaluation_page_providers'] < 0:
            st.session_state['evaluation_page_providers'] = 0

        start_index = st.session_state['evaluation_page_providers'] * items_per_page
        end_index = min(start_index + items_per_page, total_providers)
        providers_on_page = all_service_providers[start_index:end_index]

        if not providers_on_page:
            st.info("No hay proveedores para mostrar en esta página.")
            st.session_state['all_evaluation_widgets_map'] = {}
            return

        st.markdown("---") # Visual separator
        st.markdown("### Calificación de Preguntas por Proveedor")
        st.info("Utiliza los selectores para asignar una puntuación a cada pregunta por proveedor.")

        # Display provider mapping for the current page
        with st.expander("Ver mapeo de Proveedores en esta página"):
            if providers_on_page:
                for prov_val in providers_on_page:
                    idx = all_service_providers.index(prov_val) + 1
                    st.write(f"**Proveedor {idx}:** `{prov_val}`")
            else:
                st.write("No hay proveedores en esta página para mapear.")

        # Create columns dynamically for questions and providers
        col_widths = [0.4] + [(0.6 / len(providers_on_page)) for _ in providers_on_page]
        cols = st.columns(col_widths)

        # Header row
        with cols[0]:
            st.write("**Pregunta**")
        for i, prov_label in enumerate(providers_on_page):
            with cols[i+1]:
                global_idx = all_service_providers.index(prov_label) + 1
                st.write(f"**Proveedor {global_idx}**")
                st.markdown(f"<p style='font-size: small; text-align: center;'>({prov_label})</p>", unsafe_allow_html=True) # Smaller label
                st.write(" ") # Add spacing for alignment with selectboxes below

        # Questions and Selectboxes/Scores
        for cat, texto, escala in preguntas:
            with cols[0]:
                st.markdown(f"**[{cat}]** {texto}")

            for i, prov_original in enumerate(providers_on_page):
                with cols[i+1]:
                    # Key format: {service_type}-{category}-{question_text}-{provider_name}
                    unique_key = f"{selected_service_type}-{cat}-{texto}-{prov_original}"
                    if escala == "auto":
                        val = 0 # Default value if no specific calculation applies
                        metrics = st.session_state['current_service_type_metrics']

                        # Access provider-specific metrics within the selected service type
                        disp_prov = metrics.get('disp', pd.Series()).get(prov_original, np.nan)
                        mttr_prov = metrics.get('mttr', pd.Series()).get(prov_original, np.nan)
                        mtbf_prov = metrics.get('mtbf', pd.Series()).get(prov_original, np.nan)
                        rend_prov = metrics.get('rend', pd.Series()).get(prov_original, 'No Aplica')

                        if 'Disponibilidad' in texto and not pd.isna(disp_prov):
                            val = 2 if disp_prov >= 98 else (1 if disp_prov >= 75 else 0)
                        elif 'MTTR' in texto and not pd.isna(mttr_prov):
                            val = 2 if mttr_prov <= 5 else (1 if mttr_prov <= 20 else 0)
                        elif 'MTBF' in texto and not pd.isna(mtbf_prov):
                            val = 2 if mtbf_prov > 1000 else (1 if mtbf_prov >= 100 else 0)
                        elif 'Rendimiento' in texto:
                            if rend_prov == 'Alto':
                                val = 2
                            elif rend_prov == 'Medio':
                                val = 1
                            elif rend_prov == 'Bajo':
                                val = 0

                        st.write(f"**{val}**") # Display the numerical score for auto questions

                        # Display the detailed description for the auto-calculated score if available
                        if cat in rangos_detallados and texto in rangos_detallados[cat] and val in rangos_detallados[cat][texto]:
                             st.markdown(f"<p style='font-size: smaller; color: grey;'>({rangos_detallados[cat][texto][val]})</p>", unsafe_allow_html=True)
                        else:
                            st.markdown(f"<p style='font-size: smaller; color: grey;'>(Valor calculado automáticamente)</p>", unsafe_allow_html=True)


                        # Store fixed value in session state to persist
                        st.session_state['all_evaluation_widgets_map'][unique_key] = val
                    else:
                        # Get detailed options for manual questions
                        if cat in rangos_detallados and texto in rangos_detallados[cat]:
                            # Map numerical scores to their descriptions for the selectbox
                            options_dict = rangos_detallados[cat][texto]
                            # Create a list of (description, value) tuples, sorted by value descending
                            sorted_options = sorted(options_dict.items(), key=lambda item: item[0], reverse=True)

                            # Create a list of descriptions for the selectbox
                            display_options = [desc for val, desc in sorted_options]
                            # Create a mapping from description back to value
                            desc_to_value_map = {desc: val for val, desc in sorted_options}

                            current_value = st.session_state['all_evaluation_widgets_map'].get(unique_key, 0) # Get existing value or default to 0

                            # Find the current description based on the current_value
                            current_description = next((desc for val, desc in sorted_options if val == current_value), display_options[0])

                            # Get the index of the current_description for the selectbox
                            try:
                                current_index = display_options.index(current_description)
                            except ValueError:
                                current_index = 0 # Default to first option if not found

                            selected_description = st.selectbox(
                                label=" ", # Empty label for cleaner UI
                                options=display_options,
                                key=unique_key,
                                index=current_index,
                            )
                            # Store the numerical value corresponding to the selected description
                            st.session_state['all_evaluation_widgets_map'][unique_key] = desc_to_value_map[selected_description]
                        else:
                            # Fallback if no detailed ranges are defined (shouldn't happen with current data)
                            opts = {'Sobresaliente': 2, 'Bueno': 1, 'Indiferente': 0, 'Malo': -1}
                            current_value = st.session_state['all_evaluation_widgets_map'].get(unique_key, 0)
                            current_label = next((label for label, val in opts.items() if val == current_value), 'Indiferente')
                            current_index = list(opts.keys()).index(current_label)
                            selected_label = st.selectbox(
                                label=" ",
                                options=list(opts.keys()),
                                key=unique_key,
                                index=current_index,
                            )
                            st.session_state['all_evaluation_widgets_map'][unique_key] = opts[selected_label]

        # Pagination buttons
        col_prev, col_next = st.columns([1,1])
        with col_prev:
            if st.button("Anterior", key="prev_eval_page_providers", disabled=(st.session_state['evaluation_page_providers'] == 0)):
                st.session_state['evaluation_page_providers'] -= 1
                st.rerun() # Use rerun here for page changes, as the content structure changes
        with col_next:
            if st.button("Siguiente", key="next_eval_page_providers", disabled=(end_index >= total_providers)):
                st.session_state['evaluation_page_providers'] += 1
                st.rerun() # Use rerun here for page changes

        st.markdown("---") # Visual separator
        if st.button("Generar Resumen de Evaluación y Exportar a Excel"):
            self.generar_resumen_evaluacion(df_filtered_by_service, selected_service_type)

        # Plotting if metrics are available for the selected service type
        metrics = st.session_state.get('current_service_type_metrics', {})
        if metrics:
            st.markdown("#### Distribución de Rendimiento por Proveedor")
            # For plotting, aggregate performance categories across providers for this service type
            rend_data_for_plot = metrics.get('rend', pd.Series()).dropna()
            if not rend_data_for_plot.empty:
                self.graficar_rendimiento(rend_data_for_plot)
            else:
                st.info("No hay datos de rendimiento de proveedores para graficar para este tipo de servicio.")

            st.markdown("#### Métricas Clave de Desempeño por Proveedor")
            mttr_data_for_plot = metrics.get('mttr', pd.Series()).dropna()
            mtbf_data_for_plot = metrics.get('mtbf', pd.Series()).dropna()
            disp_data_for_plot = metrics.get('disp', pd.Series()).dropna()

            plots_exist = not mttr_data_for_plot.empty or not mtbf_data_for_plot.empty or not disp_data_for_plot.empty
            if plots_exist:
                self.graficar_resumen_proveedor(mttr_data_for_plot, mtbf_data_for_plot, disp_data_for_plot)
            else:
                st.info("No hay datos de MTTR, MTBF o Disponibilidad válidos para graficar de los proveedores para este tipo de servicio.")
        else:
            st.info("No hay métricas de desempeño disponibles para los proveedores de este tipo de servicio.")


    def generar_resumen_evaluacion(self, df_filtered_by_service, selected_service_type):
        st.subheader("Generando resumen de evaluación...")

        if not st.session_state.get('all_evaluation_widgets_map'):
            st.warning("No hay evaluaciones para resumir. Selecciona un tipo de servicio y completa las evaluaciones.")
            return

        # Filter evaluation map to only include the current service type's evaluations
        current_service_evaluations = {k: v for k, v in st.session_state['all_evaluation_widgets_map'].items()
                                    if k.startswith(selected_service_type + '-')}

        if not current_service_evaluations:
            st.warning(f"No se encontraron evaluaciones para el tipo de servicio seleccionado: '{selected_service_type}'.")
            return

        # Dynamically get unique providers from the filtered evaluations for this service type
        unique_providers_evaluated = sorted(list(set([key.split('-', 3)[3] for key in current_service_evaluations.keys()])))

        # Create a DataFrame to store results
        summary_data = []
        for cat, texto, escala in preguntas:
            row = {'Categoría': cat, 'Pregunta': texto}
            for prov in unique_providers_evaluated:
                unique_key = f"{selected_service_type}-{cat}-{texto}-{prov}"
                score = current_service_evaluations.get(unique_key, np.nan) # Use NaN for missing scores
                row[prov] = score
            summary_data.append(row)

        summary_df_calificacion = pd.DataFrame(summary_data)
        summary_df_calificacion.set_index(['Categoría', 'Pregunta'], inplace=True)

        # Calculate total score per provider
        total_scores_by_provider = summary_df_calificacion.sum(numeric_only=True)
        summary_df_calificacion.loc[('Total General', 'Puntuación Total')] = total_scores_by_provider

        # Display the summary table
        st.markdown("### Resumen de Calificación de Proveedores por Pregunta")
        st.dataframe(summary_df_calificacion.style.format(precision=0, na_rep='N/A'), use_container_width=True)

        # Generate Ranking
        ranking_df = total_scores_by_provider.to_frame(name='Puntuación Total').sort_values('Puntuación Total', ascending=False)
        ranking_df.index.name = 'Proveedor'
        ranking_df['Ranking'] = ranking_df['Puntuación Total'].rank(method='min', ascending=False).astype(int)
        ranking_df = ranking_df.reset_index().set_index('Ranking')

        st.markdown("### Ranking de Proveedores")
        st.dataframe(ranking_df.style.format(precision=0, na_rep='N/A'), use_container_width=True)

        # Prepare metrics for export for each provider of this service type
        metrics = st.session_state.get('current_service_type_metrics', {})
        cnt_p = metrics.get('cnt', pd.Series())
        cost_p = metrics.get('cost', pd.Series())
        mttr_p = metrics.get('mttr', pd.Series())
        mtbf_p = metrics.get('mtbf', pd.Series())
        disp_p = metrics.get('disp', pd.Series())
        rend_p = metrics.get('rend', pd.Series())

        # Create a DataFrame for quantitative metrics
        quantitative_metrics_data = {
            'Tipo de Servicio': selected_service_type,
            'Proveedor': [],
            'Número de Avisos': [],
            'Costo Total Real': [],
            'MTTR Promedio (hrs)': [],
            'MTBF Promedio (hrs)': [],
            'Disponibilidad Promedio (%)': [],
            'Rendimiento': []
        }

        for prov in unique_providers_evaluated:
            quantitative_metrics_data['Proveedor'].append(prov)
            quantitative_metrics_data['Número de Avisos'].append(cnt_p.get(prov, 0))
            quantitative_metrics_data['Costo Total Real'].append(cost_p.get(prov, 0))
            quantitative_metrics_data['MTTR Promedio (hrs)'].append(mttr_p.get(prov, np.nan))
            quantitative_metrics_data['MTBF Promedio (hrs)'].append(mtbf_p.get(prov, np.nan))
            quantitative_metrics_data['Disponibilidad Promedio (%)'].append(disp_p.get(prov, np.nan))
            quantitative_metrics_data['Rendimiento'].append(rend_p.get(prov, 'No Aplica'))

        quantitative_metrics_df = pd.DataFrame(quantitative_metrics_data)

        st.markdown("### Métricas Cuantitativas por Proveedor (para este Tipo de Servicio)")
        st.dataframe(quantitative_metrics_df.style.format(precision=2, na_rep='N/A'), use_container_width=True)


        # To Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            summary_df_calificacion.to_excel(writer, sheet_name='Calificaciones por Pregunta')
            ranking_df.to_excel(writer, sheet_name='Ranking Proveedores')
            quantitative_metrics_df.to_excel(writer, sheet_name='Metricas Cuantitativas', index=False)

            # Optional: Auto-adjust column widths for better readability
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                for idx, col in enumerate(summary_df_calificacion.columns):
                    max_len = max(
                        len(str(col)),
                        summary_df_calificacion[col].astype(str).map(len).max()
                    ) + 2
                    worksheet.set_column(idx, idx, max_len)
                # For MultiIndex, adjust first few columns manually if needed
                if sheet_name == 'Calificaciones por Pregunta':
                    worksheet.set_column(0, 0, 20) # Categoría
                    worksheet.set_column(1, 1, 60) # Pregunta

        st.download_button(
            label="Descargar Resumen de Evaluación como Excel",
            data=output.getvalue(),
            file_name=f"Resumen_Evaluacion_{selected_service_type}_Proveedores.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )


    def graficar_rendimiento(self, rendimiento_series):
        if rendimiento_series.empty:
            return

        # Count occurrences of each category
        rendimiento_counts = rendimiento_series.value_counts().reindex(['Alto', 'Medio', 'Bajo', 'No Aplica'], fill_value=0)

        fig, ax = plt.subplots(figsize=(10, 6))
        bars = ax.bar(rendimiento_counts.index, rendimiento_counts.values, color=['#4CAF50', '#FFC107', '#FF5722', '#9E9E9E']) # Green, Amber, Red, Grey
        ax.set_title('Distribución de Rendimiento de Proveedores')
        ax.set_xlabel('Nivel de Rendimiento')
        ax.set_ylabel('Número de Proveedores')
        ax.set_ylim(0, rendimiento_counts.max() * 1.1)

        # Add labels on top of bars
        for bar in bars:
            yval = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 0), ha='center', va='bottom', fontsize=9) # Add 0.5 for slight offset

        st.pyplot(fig)


    def graficar_resumen_proveedor(self, mttr_series, mtbf_series, disp_series):
        # Combine all relevant series into one DataFrame for easy plotting
        plot_df = pd.DataFrame({
            'MTTR (hrs)': mttr_series,
            'MTBF (hrs)': mtbf_series,
            'Disponibilidad (%)': disp_series
        })
        plot_df = plot_df.reindex(st.session_state['all_service_providers']) # Ensure consistent order

        if plot_df.empty:
            st.info("No hay datos suficientes para graficar métricas clave de desempeño.")
            return

        # Plotting each metric in separate subplots
        fig, axes = plt.subplots(3, 1, figsize=(12, 18), sharex=True)
        fig.suptitle('Métricas Clave de Desempeño por Proveedor', fontsize=16)

        # MTTR Plot
        sns.barplot(x=plot_df.index, y='MTTR (hrs)', data=plot_df, ax=axes[0], palette='viridis')
        axes[0].set_title('MTTR Promedio por Proveedor')
        axes[0].set_ylabel('MTTR (hrs)')
        axes[0].tick_params(axis='x', rotation=45, ha='right') # Rotate x labels for better readability

        # MTBF Plot
        sns.barplot(x=plot_df.index, y='MTBF (hrs)', data=plot_df, ax=axes[1], palette='plasma')
        axes[1].set_title('MTBF Promedio por Proveedor')
        axes[1].set_ylabel('MTBF (hrs)')
        axes[1].tick_params(axis='x', rotation=45, ha='right')

        # Disponibilidad Plot
        sns.barplot(x=plot_df.index, y='Disponibilidad (%)', data=plot_df, ax=axes[2], palette='cividis')
        axes[2].set_title('Disponibilidad Promedio por Proveedor')
        axes[2].set_ylabel('Disponibilidad (%)')
        axes[2].tick_params(axis='x', rotation=45, ha='right')

        plt.tight_layout(rect=[0, 0.03, 1, 0.96]) # Adjust layout to prevent title overlap
        st.pyplot(fig)

# --- Main Application Logic (using Streamlit's new structure) ---

# Initialize session state for navigation
if 'page' not in st.session_state:
    st.session_state['page'] = 'upload'

def navigate_to(page):
    st.session_state['page'] = page
    st.rerun()

# Sidebar for navigation
with st.sidebar:
    st.image("https://www.sura.com/blogs/wp-content/uploads/2018/02/LogoSURA.png", width=200) # Replace with actual Sura logo if available
    st.title("Menú Principal")
    if st.button("Cargar Datos", key="nav_upload"):
        navigate_to('upload')
    if 'df' in st.session_state and st.session_state['df'] is not None:
        if st.button("Análisis de Costos y Avisos", key="nav_costos"):
            navigate_to('costos_avisos')
        if st.button("Evaluación de Proveedores", key="nav_evaluacion"):
            navigate_to('evaluacion')
    else:
        st.warning("Carga datos para habilitar otras secciones.")


# --- Page Logic ---
if st.session_state['page'] == 'upload':
    st.title("Carga de Datos")
    st.write("Por favor, sube el archivo Excel que contiene las 5 hojas de datos (IW29, IW39, IH08, IW65, ZPM015).")
    uploaded_file = st.file_uploader("Arrastra aquí tu archivo Excel o haz clic para buscar", type=["xlsx"])

    if uploaded_file:
        st.info("Archivo cargando y procesando. Esto puede tardar unos segundos...")
        try:
            df = load_and_merge_data(uploaded_file)
            st.session_state['df'] = df
            st.success("¡Datos cargados y procesados exitosamente!")
            st.write("Vista previa de los datos:")
            st.dataframe(df.head())
            st.info("Ahora puedes navegar a las secciones de análisis y evaluación desde el menú lateral.")
            # Automatically navigate to Costos y Avisos for initial display
            navigate_to('costos_avisos')
        except Exception as e:
            st.error(f"Hubo un error al procesar el archivo: {e}")
            st.warning("Asegúrate de que el archivo Excel contenga las hojas correctas y los formatos esperados.")

elif st.session_state['page'] == 'costos_avisos':
    if 'df' in st.session_state and st.session_state['df'] is not None:
        st.title("Análisis de Costos y Avisos")

        df = st.session_state['df']

        # Sidebar filters for Costos y Avisos
        st.sidebar.markdown("---")
        st.sidebar.header("Filtros para Análisis")
        all_providers = ['Todos'] + sorted(df['PROVEEDOR'].dropna().unique().tolist())
        selected_provider_costos = st.sidebar.selectbox("Selecciona Proveedor:", all_providers, key='costos_provider_filter')

        all_service_types = ['Todos'] + sorted(df['TIPO DE SERVICIO'].dropna().unique().tolist())
        selected_service_type_costos = st.sidebar.selectbox("Selecciona Tipo de Servicio:", all_service_types, key='costos_service_type_filter')

        min_date = df['fecha_de_aviso'].min().date() if not df['fecha_de_aviso'].empty and pd.notna(df['fecha_de_aviso'].min()) else pd.to_datetime('2020-01-01').date()
        max_date = df['fecha_de_aviso'].max().date() if not df['fecha_de_aviso'].empty and pd.notna(df['fecha_de_aviso'].max()) else pd.to_datetime('2024-12-31').date()
        date_range = st.sidebar.date_input(
            "Rango de Fechas:",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date,
            key='costos_date_filter'
        )

        filtered_df_costos = df.copy()
        if selected_provider_costos != 'Todos':
            filtered_df_costos = filtered_df_costos[filtered_df_costos['PROVEEDOR'] == selected_provider_costos]
        if selected_service_type_costos != 'Todos':
            filtered_df_costos = filtered_df_costos[filtered_df_costos['TIPO DE SERVICIO'] == selected_service_type_costos]

        if len(date_range) == 2:
            start_date, end_date = date_range
            filtered_df_costos = filtered_df_costos[
                (filtered_df_costos['fecha_de_aviso'].dt.date >= start_date) &
                (filtered_df_costos['fecha_de_aviso'].dt.date <= end_date)
            ]

        if filtered_df_costos.empty:
            st.warning("No hay datos para los filtros seleccionados.")
        else:
            st.markdown("### Resumen de Costos y Avisos")

            total_costos = filtered_df_costos['COSTO'].sum()
            total_avisos = filtered_df_costos['AVISO'].nunique()
            avg_costo_por_aviso = total_costos / total_avisos if total_avisos > 0 else 0

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total de Costos Reales", f"${total_costos:,.2f}")
            with col2:
                st.metric("Total de Avisos Únicos", f"{total_avisos:,}")
            with col3:
                st.metric("Costo Promedio por Aviso", f"${avg_costo_por_aviso:,.2f}")

            st.markdown("### Costos por Categoría de Descripción")
            costos_por_categoria = filtered_df_costos.groupby('description_category')['COSTO'].sum().sort_values(ascending=False)
            fig_cat_cost, ax_cat_cost = plt.subplots(figsize=(10, 6))
            sns.barplot(x=costos_por_categoria.index, y=costos_por_categoria.values, ax=ax_cat_cost, palette='coolwarm')
            ax_cat_cost.set_title('Costos Totales por Categoría de Descripción')
            ax_cat_cost.set_xlabel('Categoría de Descripción')
            ax_cat_cost.set_ylabel('Costo Total ($)')
            ax_cat_cost.ticklabel_format(style='plain', axis='y')
            st.pyplot(fig_cat_cost)

            st.markdown("### Avisos por Categoría de Descripción")
            avisos_por_categoria = filtered_df_costos.groupby('description_category')['AVISO'].nunique().sort_values(ascending=False)
            fig_cat_avisos, ax_cat_avisos = plt.subplots(figsize=(10, 6))
            sns.barplot(x=avisos_por_categoria.index, y=avisos_por_categoria.values, ax=ax_cat_avisos, palette='viridis')
            ax_cat_avisos.set_title('Número de Avisos por Categoría de Descripción')
            ax_cat_avisos.set_xlabel('Categoría de Descripción')
            ax_cat_avisos.set_ylabel('Número de Avisos')
            ax_cat_avisos.ticklabel_format(style='plain', axis='y')
            st.pyplot(fig_cat_avisos)

            # Monthly trends
            st.markdown("### Tendencia Mensual de Costos y Avisos")
            df_monthly = filtered_df_costos.set_index('fecha_de_aviso').resample('M').agg(
                Total_Costos=('COSTO', 'sum'),
                Num_Avisos=('AVISO', 'nunique')
            ).fillna(0)

            fig_monthly, ax_monthly1 = plt.subplots(figsize=(12, 6))
            color = 'tab:red'
            ax_monthly1.set_xlabel('Fecha')
            ax_monthly1.set_ylabel('Total Costos ($)', color=color)
            ax_monthly1.plot(df_monthly.index, df_monthly['Total_Costos'], color=color, marker='o')
            ax_monthly1.tick_params(axis='y', labelcolor=color)

            ax_monthly2 = ax_monthly1.twinx()
            color = 'tab:blue'
            ax_monthly2.set_ylabel('Número de Avisos', color=color)
            ax_monthly2.plot(df_monthly.index, df_monthly['Num_Avisos'], color=color, marker='x', linestyle='--')
            ax_monthly2.tick_params(axis='y', labelcolor=color)

            fig_monthly.autofmt_xdate()
            plt.title('Tendencia Mensual de Costos y Avisos')
            st.pyplot(fig_monthly)

            st.markdown("### Detalle de Datos Filtrados")
            st.dataframe(filtered_df_costos[['AVISO', 'fecha_de_aviso', 'PROVEEDOR', 'TIPO DE SERVICIO', 'descripcion', 'COSTO', 'TIEMPO PARADA']].head(100)) # Show top 100 rows


    else:
        st.warning("Por favor, carga los datos primero desde la sección 'Cargar Datos'.")

elif st.session_state['page'] == 'evaluacion':
    if 'df' in st.session_state and st.session_state['df'] is not None:
        st.title("Evaluación de Proveedores")
        df = st.session_state['df']

        eval_app = EvaluacionProveedoresApp(df)

        st.sidebar.markdown("---")
        st.sidebar.header("Selección para Evaluación")

        # Get unique service types from the dataframe
        all_service_types_eval = sorted(df['TIPO DE SERVICIO'].dropna().unique().tolist())

        # Add "Seleccionar..." as the first option
        service_type_options = ["Seleccionar..."] + all_service_types_eval

        # Find the index of the currently selected service type (if any)
        try:
            current_index = service_type_options.index(st.session_state['selected_service_type'])
        except ValueError:
            current_index = 0 # Default to "Seleccionar..."

        selected_service_type_eval = st.sidebar.selectbox(
            "Selecciona Tipo de Servicio para Evaluar:",
            options=service_type_options,
            index=current_index,
            key='eval_service_type_selector'
        )

        # Update session state for selected service type
        if st.session_state['selected_service_type'] != selected_service_type_eval:
            st.session_state['selected_service_type'] = selected_service_type_eval
            st.session_state['evaluation_page_providers'] = 0 # Reset page when service type changes
            # Optionally, clear past evaluations if a new service type is chosen
            # st.session_state['all_evaluation_widgets_map'] = {}
            st.rerun() # Rerun to apply the new service type selection

        if st.session_state['selected_service_type'] != "Seleccionar...":
            df_filtered_by_service = df[df['TIPO DE SERVICIO'] == st.session_state['selected_service_type']]
            eval_app.display_evaluation_form(df_filtered_by_service, st.session_state['selected_service_type'])
        else:
            st.info("Por favor, selecciona un 'Tipo de Servicio' en la barra lateral para comenzar la evaluación de proveedores.")

    else:
        st.warning("Por favor, carga los datos primero desde la sección 'Cargar Datos'.")